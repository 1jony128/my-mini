import puppeteer from 'puppeteer';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { createServer } from 'vite';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

const routes = [
  '/',
  '/login',
  '/register',
  '/gpt-bez-vpn',
  '/blog',
  '/privacy',
  '/terms'
];

async function prerenderForDocker() {
  console.log('üê≥ –ó–∞–ø—É—Å–∫ –ø—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –¥–ª—è Docker...');

  // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  const server = await createServer({
    configFile: path.join(__dirname, '../vite.config.ts'),
    root: path.join(__dirname, '..'),
    server: { middlewareMode: true }
  });

  const app = server.middlewares;
  const httpServer = require('http').createServer(app);
  
  await new Promise((resolve) => {
    httpServer.listen(4173, resolve);
  });

  console.log('üåê –í—Ä–µ–º–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 4173');

  const browser = await puppeteer.launch({
    headless: true,
    args: [
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-dev-shm-usage',
      '--disable-gpu',
      '--disable-web-security',
      '--disable-features=VizDisplayCompositor',
      '--single-process',
      '--no-zygote'
    ]
  });

  const page = await browser.newPage();

  // –û—Ç–∫–ª—é—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
  await page.setRequestInterception(true);
  page.on('request', (request) => {
    if (['image', 'font'].indexOf(request.resourceType()) !== -1) {
      request.abort();
    } else {
      request.continue();
    }
  });

  for (const route of routes) {
    try {
      console.log(`üìÑ –†–µ–Ω–¥–µ—Ä–∏–º ${route}...`);

      const url = `http://localhost:4173${route}`;
      await page.goto(url, { waitUntil: 'networkidle0', timeout: 10000 });

      // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ React
      await page.waitForSelector('#root', { timeout: 5000 });
      await new Promise(resolve => setTimeout(resolve, 2000));

      const html = await page.content();

      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞
      const routePath = route === '/' ? '/index' : route;
      const outputDir = path.join(__dirname, '../build', routePath);
      fs.mkdirSync(outputDir, { recursive: true });

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º HTML –≤ —Ñ–∞–π–ª
      fs.writeFileSync(path.join(outputDir, 'index.html'), html);
      console.log(`‚úÖ ${route} –≥–æ—Ç–æ–≤`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ ${route}:`, error.message);
    }
  }

  await browser.close();
  httpServer.close();
  await server.close();
  
  console.log('üéâ –ü—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–ª—è Docker –∑–∞–≤–µ—Ä—à–µ–Ω!');
}

prerenderForDocker().catch(console.error);
